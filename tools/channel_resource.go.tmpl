// Code generated by go generate in tools; DO NOT EDIT.
// Generated at: {{ .Timestamp }}

package provider

import (
	"context"
	"fmt"
	"github.com/bwmarrin/discordgo"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	{{ if or .CanHaveNSFW .CanHaveParent }} "github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault" {{end}}
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/Cyb3r-Jak3/discord-terraform/internal/utils"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &DiscordTextChannelResource{}
var _ resource.ResourceWithImportState = &DiscordTextChannelResource{}

func NewDiscord{{ .ChannelType }}ChannelResource() resource.Resource {
	return &Discord{{ .ChannelType }}ChannelResource{}
}

type Discord{{ .ChannelType }}ChannelResource struct {
	client *Context
}

func (r *Discord{{ .ChannelType }}ChannelResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_{{ .ResourceName }}_channel"
}

func (r *Discord{{ .ChannelType }}ChannelResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "{{ .MarkdownDescription }}",

		Attributes: map[string]schema.Attribute{
		    "id": schema.StringAttribute{
                Description: "The channel ID",
                Computed:    true,
            },
            "server_id": schema.StringAttribute{
                Description: "The server ID",
       			Required:    true,
       			PlanModifiers: []planmodifier.String{
       				stringplanmodifier.RequiresReplace(),
                    },
                },
                "name": schema.StringAttribute{
                    Description: "The channel name",
                    Required:    true,
                  },
                "channel_id": schema.StringAttribute{
                    Description: "The channel ID",
                    Computed:    true,
                },
                 "type": schema.StringAttribute{
                    Description: "The channel type",
                    Optional:    true,
                    DeprecationMessage: "This field is deprecated. Type is now inferred from the resource name.",
                    Computed:    true,
                 },
                 "position": schema.Int64Attribute{
                    Description: "Sorting position of the channel",
                    Optional:    true,
                    Default:     int64default.StaticInt64(1),
                    Computed:    true,
                    Validators: []validator.Int64{
                        int64validator.AtLeast(0),
                    },
                 },

                {{- if .CanHaveParent }}
                "sync_perms_with_category": schema.BoolAttribute{
                    Description: "Whether to sync permissions with the category",
                    Optional:    true,
                    Default:     booldefault.StaticBool(true),
                    Computed:    true,
                },
                "permissions_synced": schema.BoolAttribute{
                    Description: "Whether the permissions are synced with the category",
                    Computed:    true,
                },
                "category": schema.StringAttribute{
                    Description: "The category ID",
                    Optional:    true,
                    Computed:    true,
                },
                {{- end -}}
                {{- if .CanHaveTopic }}
                "topic": schema.StringAttribute{
                    Description: "The channel topic",
                    Optional:    true,
                },
                {{- end -}}
                {{- if eq .ChannelType "Voice" }}
                "bitrate": schema.Int64Attribute{
                    Description: "The bitrate of the channel",
                    Optional:    true,
                    Default:     int64default.StaticInt64(64000),
                    Computed:    true,
                },
                "user_limit": schema.Int64Attribute{
                    Description: "The user limit of the channel",
                    Optional:    true,
                },
                {{- end -}}
                {{- if .CanHaveNSFW }}
                "nsfw": schema.BoolAttribute{
                    Description: "Whether the channel is NSFW",
                    Optional:    true,
                    Default:     booldefault.StaticBool(false),
                    Computed:    true,
                },
                {{- end -}}

                 	},
	}
}

func (r *Discord{{ .ChannelType }}ChannelResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*Context)

	if !ok {
		resp.Diagnostics.AddError(
			"unexpected resource configure type",
			fmt.Sprintf("Expected *Context, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

type {{ .ModelName }} struct {
    ID                    types.String `tfsdk:"id"`
	ServerID              types.String `tfsdk:"server_id"`
	ChannelID             types.String `tfsdk:"channel_id"`
	Type                  types.String `tfsdk:"type"`
	Name                  types.String `tfsdk:"name"`
	Position              types.Int64  `tfsdk:"position"`
	{{- if .CanHaveParent }}
	SyncPermsWithCategory types.Bool   `tfsdk:"sync_perms_with_category"`
	Category              types.String `tfsdk:"category"`
	PermissionsSynced     types.Bool   `tfsdk:"permissions_synced"`
    {{- end -}}
    {{- if .CanHaveTopic }}
	Topic                 types.String `tfsdk:"topic"`
	{{- end -}}
	{{- if .CanHaveNSFW }}
	NSFW                  types.Bool   `tfsdk:"nsfw"`
	{{- end -}}
	{{- if eq .ChannelType "Voice" }}
	Bitrate               types.Int64  `tfsdk:"bitrate"`
	UserLimit             types.Int64  `tfsdk:"user_limit"`
	{{- end -}}
}


func (r *Discord{{ .ChannelType }}ChannelResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *{{ .ModelName }}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}
	client := r.client.Session
	channelParams, err := build{{ .ChannelType }}ChannelParams(data)
	if err != nil {
		resp.Diagnostics.AddError("Failed to build channel params", err.Error())
		return
	}
	channel, err := client.GuildChannelCreateComplex(data.ServerID.ValueString(), channelParams, discordgo.WithContext(ctx))
	if err != nil {
		resp.Diagnostics.AddError("Failed to create a channel", err.Error())
		return
	}
	data, err = build{{ .ChannelType }}ChannelModel(channel{{ if .CanHaveParent }}, data.SyncPermsWithCategory {{ end }})
	if err != nil {
		resp.Diagnostics.AddError("Failed to build channel model", err.Error())
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *Discord{{ .ChannelType }}ChannelResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *{{ .ModelName }}

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}
	client := r.client.Session
	channel, err := client.Channel(data.ChannelID.ValueString(), discordgo.WithContext(ctx))
	if err != nil {
		resp.Diagnostics.AddError("Failed to fetch channel", err.Error())
		return
	}

	data, err = build{{ .ChannelType }}ChannelModel(channel{{ if .CanHaveParent }}, data.SyncPermsWithCategory {{ end }})
	if err != nil {
		resp.Diagnostics.AddError("Failed to build channel model", err.Error())
		return
	}
	{{- if .CanHaveParent }}
    if channel.ParentID == "" {
        data.PermissionsSynced = types.BoolNull()
    } else {
        parent, err := client.Channel(channel.ParentID)
        if err != nil {
            resp.Diagnostics.AddError("Failed to fetch category of channel", err.Error())
            return
        }

        data.PermissionsSynced = types.BoolValue(utils.ArePermissionsSynced(channel, parent))
    }
	{{- end }}

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *Discord{{ .ChannelType }}ChannelResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *{{ .ModelName }}

	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	client := r.client.Session
	channel, err := client.Channel(data.ChannelID.ValueString(), discordgo.WithContext(ctx))
	if err != nil {
		resp.Diagnostics.AddError("Failed to fetch channel", err.Error())
		return
	}


	channelParams, err := build{{ .ChannelType }}ChannelParams(data)
	if err != nil {
		resp.Diagnostics.AddError("Failed to build channel params", err.Error())
		return

	}
	{{- if .CanHaveParent }}
	if data.SyncPermsWithCategory.ValueBool() {
		if channel.ParentID == "" {
			resp.Diagnostics.AddError("Channel does not have a category", "")
			return
		}

		parent, err := client.Channel(channel.ParentID)
		if err != nil {
			resp.Diagnostics.AddError("Failed to fetch category of channel", err.Error())
			return
		}

		if !utils.ArePermissionsSynced(channel, parent) {
			if err := utils.SyncChannelPermissions(client, ctx, parent, channel); err != nil {
				resp.Diagnostics.AddError("Failed to sync permissions with category", err.Error())
				return
			}
		}
	}
	{{- end }}

	channel, err = client.ChannelEditComplex(data.ChannelID.ValueString(), &discordgo.ChannelEdit{
		Name:      channelParams.Name,
		Position:  &channelParams.Position,
		{{- if .CanHaveTopic }}
		Topic:     channelParams.Topic,
		{{- end -}}
		{{- if .CanHaveNSFW }}
		NSFW:      &channelParams.NSFW,
		{{- end -}}
        {{- if eq .ChannelType "Voice" }}
		Bitrate:   channelParams.Bitrate,
		UserLimit: channelParams.UserLimit,
		{{- end -}}
		{{- if .CanHaveParent }}
		ParentID:  channelParams.ParentID,
		{{- end }}
	}, discordgo.WithContext(ctx))
	if err != nil {
		resp.Diagnostics.AddError("Failed to update channel", err.Error())
		return
	}

	data, err = build{{ .ChannelType }}ChannelModel(channel{{ if .CanHaveParent }}, data.SyncPermsWithCategory {{ end }})
	if err != nil {
		resp.Diagnostics.AddError("Failed to build channel model", err.Error())
		return
	}

	{{- if .CanHaveParent }}
    if channel.ParentID == "" {
        data.PermissionsSynced = types.BoolNull()
    } else {
        parent, err := client.Channel(channel.ParentID)
        if err != nil {
            resp.Diagnostics.AddError("Failed to fetch category of channel", err.Error())
            return
        }

        data.PermissionsSynced = types.BoolValue(utils.ArePermissionsSynced(channel, parent))
    }
    {{- end }}


	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *Discord{{ .ChannelType }}ChannelResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *{{ .ModelName }}

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}
	client := r.client.Session

	if _, err := client.ChannelDelete(data.ChannelID.ValueString(), discordgo.WithContext(ctx)); err != nil {
		resp.Diagnostics.AddError("Failed to delete channel", err.Error())
		return
	}
}

func (r *Discord{{ .ChannelType }}ChannelResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
        {{- if .CanHaveParent }}
		client := r.client.Session
    	channel, err := client.Channel(req.ID)
    	if err != nil {
    		resp.Diagnostics.AddError("Failed to fetch channel", err.Error())
    		return
    	}
    	if channel.ParentID == "" {
    		resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("sync_perms_with_category"), false)...)
    	} else {
    		parent, err := client.Channel(channel.ParentID)
    		if err != nil {
    			resp.Diagnostics.AddError("Failed to fetch category of channel", err.Error())
    			return
    		}
    		resp.Diagnostics.Append(resp.State.SetAttribute(ctx, path.Root("sync_perms_with_category"), types.BoolValue(utils.ArePermissionsSynced(channel, parent)))...)
    	}
    	{{- end }}
    	resource.ImportStatePassthroughID(ctx, path.Root("channel_id"), req, resp)
}

func build{{ .ChannelType }}ChannelParams(data *{{ .ModelName }}) (discordgo.GuildChannelCreateData, error) {
	if data.Type.ValueString() == "" {
            data.Type = types.StringValue("{{ .ResourceName }}")
    }
	channelType, okay := utils.GetDiscordChannelType(data.Type.ValueString())
	if !okay {
		return discordgo.GuildChannelCreateData{}, fmt.Errorf("invalid channel type: %s", data.Type.ValueString())
	}
	return discordgo.GuildChannelCreateData{
		Name:      data.Name.ValueString(),
		Position:  int(data.Position.ValueInt64()),
		Type:      channelType,
		{{- if .CanHaveTopic }}
		Topic:     data.Topic.ValueString(),
		{{- end -}}
        {{- if .CanHaveNSFW }}
		NSFW:      data.NSFW.ValueBool(),
		{{- end -}}
        {{- if eq .ChannelType "Voice" }}
		Bitrate:   int(data.Bitrate.ValueInt64()),
		UserLimit: int(data.UserLimit.ValueInt64()),
		{{- end -}}
        {{- if .CanHaveParent }}
		ParentID:  data.Category.ValueString(),
		{{- end }}
	}, nil

}

func build{{ .ChannelType }}ChannelModel(channel *discordgo.Channel, {{ if .CanHaveParent }} SyncPermsWithCategory types.Bool {{ end }}) (*{{ .ModelName }}, error) {
	channelType, okay := utils.GetTextChannelType(channel.Type)
	if !okay {
		return &{{ .ModelName }}{}, fmt.Errorf("invalid channel type: %s", channelType)
	}

	return &{{ .ModelName }}{
	    ID:        types.StringValue(channel.ID),
		ServerID:  types.StringValue(channel.GuildID),
		ChannelID: types.StringValue(channel.ID),
        Type:      types.StringValue(channelType),
        Name:      types.StringValue(channel.Name),
        Position:  types.Int64Value(int64(channel.Position)),
		{{- if .CanHaveParent }}
		Category:  types.StringValue(channel.ParentID),
		SyncPermsWithCategory: SyncPermsWithCategory,
        {{- end -}}
		{{- if .CanHaveTopic }}
		Topic:     types.StringValue(channel.Topic),
		{{- end -}}
        {{- if .CanHaveNSFW }}
		NSFW:      types.BoolValue(channel.NSFW),
		{{- end -}}
        {{- if eq .ChannelType "Voice" }}
		Bitrate:   types.Int64Value(int64(channel.Bitrate)),
		UserLimit: types.Int64Value(int64(channel.UserLimit)),
		{{- end }}
	}, nil
}

