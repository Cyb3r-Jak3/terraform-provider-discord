// Code generated by go generate in tools; DO NOT EDIT.
// Generated at: 2025-02-01T21:25:19-05:00

package provider

import (
	"context"
	"fmt"
	"github.com/bwmarrin/discordgo"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework/path"
	"github.com/hashicorp/terraform-plugin-framework/resource"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"

	"github.com/Cyb3r-Jak3/discord-terraform/internal/utils"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ resource.Resource = &DiscordTextChannelResource{}
var _ resource.ResourceWithImportState = &DiscordTextChannelResource{}

func NewDiscordCategoryChannelResource() resource.Resource {
	return &DiscordCategoryChannelResource{}
}

type DiscordCategoryChannelResource struct {
	client *Context
}

func (r *DiscordCategoryChannelResource) Metadata(ctx context.Context, req resource.MetadataRequest, resp *resource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_category_channel"
}

func (r *DiscordCategoryChannelResource) Schema(ctx context.Context, req resource.SchemaRequest, resp *resource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "Discord Category Channel Resource",

		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Description: "The channel ID",
				Computed:    true,
			},
			"server_id": schema.StringAttribute{
				Description: "The server ID",
				Required:    true,
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},
			"name": schema.StringAttribute{
				Description: "The channel name",
				Required:    true,
			},
			"channel_id": schema.StringAttribute{
				Description: "The channel ID",
				Computed:    true,
			},
			"type": schema.StringAttribute{
				Description:        "The channel type",
				Optional:           true,
				DeprecationMessage: "This field is deprecated. Type is now inferred from the resource name.",
				Computed:           true,
			},
			"position": schema.Int64Attribute{
				Description: "Sorting position of the channel",
				Optional:    true,
				Default:     int64default.StaticInt64(1),
				Computed:    true,
				Validators: []validator.Int64{
					int64validator.AtLeast(0),
				},
			}},
	}
}

func (r *DiscordCategoryChannelResource) Configure(ctx context.Context, req resource.ConfigureRequest, resp *resource.ConfigureResponse) {
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*Context)

	if !ok {
		resp.Diagnostics.AddError(
			"unexpected resource configure type",
			fmt.Sprintf("Expected *Context, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

type DiscordCategoryChannel struct {
	ID        types.String `tfsdk:"id"`
	ServerID  types.String `tfsdk:"server_id"`
	ChannelID types.String `tfsdk:"channel_id"`
	Type      types.String `tfsdk:"type"`
	Name      types.String `tfsdk:"name"`
	Position  types.Int64  `tfsdk:"position"`
}

func (r *DiscordCategoryChannelResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
	var data *DiscordCategoryChannel

	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}
	client := r.client.Session
	channelParams, err := buildCategoryChannelParams(data)
	if err != nil {
		resp.Diagnostics.AddError("Failed to build channel params", err.Error())
		return
	}
	channel, err := client.GuildChannelCreateComplex(data.ServerID.ValueString(), channelParams, discordgo.WithContext(ctx))
	if err != nil {
		resp.Diagnostics.AddError("Failed to create a channel", err.Error())
		return
	}
	data, err = buildCategoryChannelModel(channel)
	if err != nil {
		resp.Diagnostics.AddError("Failed to build channel model", err.Error())
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *DiscordCategoryChannelResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
	var data *DiscordCategoryChannel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}
	client := r.client.Session
	channel, err := client.Channel(data.ChannelID.ValueString(), discordgo.WithContext(ctx))
	if err != nil {
		resp.Diagnostics.AddError("Failed to fetch channel", err.Error())
		return
	}

	data, err = buildCategoryChannelModel(channel)
	if err != nil {
		resp.Diagnostics.AddError("Failed to build channel model", err.Error())
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *DiscordCategoryChannelResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
	var data *DiscordCategoryChannel

	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}

	client := r.client.Session
	channel, err := client.Channel(data.ChannelID.ValueString(), discordgo.WithContext(ctx))
	if err != nil {
		resp.Diagnostics.AddError("Failed to fetch channel", err.Error())
		return
	}

	channelParams, err := buildCategoryChannelParams(data)
	if err != nil {
		resp.Diagnostics.AddError("Failed to build channel params", err.Error())
		return

	}

	channel, err = client.ChannelEditComplex(data.ChannelID.ValueString(), &discordgo.ChannelEdit{
		Name:     channelParams.Name,
		Position: &channelParams.Position,
	}, discordgo.WithContext(ctx))
	if err != nil {
		resp.Diagnostics.AddError("Failed to update channel", err.Error())
		return
	}

	data, err = buildCategoryChannelModel(channel)
	if err != nil {
		resp.Diagnostics.AddError("Failed to build channel model", err.Error())
		return
	}

	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}

func (r *DiscordCategoryChannelResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
	var data *DiscordCategoryChannel

	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

	if resp.Diagnostics.HasError() {
		return
	}
	client := r.client.Session

	if _, err := client.ChannelDelete(data.ChannelID.ValueString(), discordgo.WithContext(ctx)); err != nil {
		resp.Diagnostics.AddError("Failed to delete channel", err.Error())
		return
	}
}

func (r *DiscordCategoryChannelResource) ImportState(ctx context.Context, req resource.ImportStateRequest, resp *resource.ImportStateResponse) {
	resource.ImportStatePassthroughID(ctx, path.Root("channel_id"), req, resp)
}

func buildCategoryChannelParams(data *DiscordCategoryChannel) (discordgo.GuildChannelCreateData, error) {
	if data.Type.ValueString() == "" {
		data.Type = types.StringValue("category")
	}
	channelType, okay := utils.GetDiscordChannelType(data.Type.ValueString())
	if !okay {
		return discordgo.GuildChannelCreateData{}, fmt.Errorf("invalid channel type: %s", data.Type.ValueString())
	}
	return discordgo.GuildChannelCreateData{
		Name:     data.Name.ValueString(),
		Position: int(data.Position.ValueInt64()),
		Type:     channelType,
	}, nil

}

func buildCategoryChannelModel(channel *discordgo.Channel) (*DiscordCategoryChannel, error) {
	channelType, okay := utils.GetTextChannelType(channel.Type)
	if !okay {
		return &DiscordCategoryChannel{}, fmt.Errorf("invalid channel type: %s", channelType)
	}

	return &DiscordCategoryChannel{
		ID:        types.StringValue(channel.ID),
		ServerID:  types.StringValue(channel.GuildID),
		ChannelID: types.StringValue(channel.ID),
		Type:      types.StringValue(channelType),
		Name:      types.StringValue(channel.Name),
		Position:  types.Int64Value(int64(channel.Position)),
	}, nil
}
